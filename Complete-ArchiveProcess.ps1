# –ó–∞–≥—Ä—É–∑–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏  
$config = Get-Content "config.json" | ConvertFrom-Json -AsHashtable

$requiredPaths = [ordered]@{
    SourcePath = "–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —á–µ—Ä—Ç–µ–∂–∞–º–∏"
    ResultPath = "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —á–µ—Ä—Ç–µ–∂–∞–º–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
    ZolaContentPath = "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞"
}

Import-Module (Join-Path $PSScriptRoot "libs/PathHelper.psm1")   -Force

$results = $requiredPaths.Keys | ForEach-Object {
    $key = $_
    $path = ([string]::IsNullOrWhiteSpace($config[$key])) ? ( Read-Host $requiredPaths[$key] ) : $config[$key]

    try {
        [PSCustomObject]@{
            Type = 'Checked'
            OriginalPath = $key
            Result = Test-RequiredPathsAndReturn $path $PSScriptRoot 
            Error = $null
        }
    }
    catch {
        [PSCustomObject]@{
            Type = 'Error'
            OriginalPath = $key
            Result = $null
            Error = $_.Exception.Message
        }
    }
} | Group-Object Type -AsHashTable

# –ü—Ä–æ–≤–µ—Ä–∏–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
$goodResultPath = $results['Checked'] | Where-Object { $_.OriginalPath -eq "ResultPath" }
if ($goodResultPath) {
    try {
        Test-RequiredPathsAndReturn (Join-Path $goodResultPath.Result $MetadataDir)
    }
    catch {
        $results['Error'] += [PSCustomObject]@{
            OriginalPath = "metadata"
            Result = $null
            Error = $_.Exception.Message 
            Type = "Error"
        }
    }
}

# –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–æ–∫, –ø–æ–∫–∞–∂–µ–º –∏—Ö –∏ –∑–∞–≤–µ—Ä—à–∏–º —Ä–∞–±–æ—Ç—É
$errors = $results['Error']
if ($errors.Count -gt 0)
{
    Write-Host "`n–ü–∞–ø–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: ($($errors.Count)):" -ForegroundColor Red  
    $errors | ForEach-Object { Write-Host "  $($_.OriginalPath): $($_.Error)" }
    
    exit 1;
}

$results['Checked'] | ForEach-Object {
    Write-Host "üìÇ –ü—É—Ç—å $($_.OriginalPath) —É–∫–∞–∑–∞–Ω –∫–∞–∫: $($_.Result)" -ForegroundColor Green
    $config[$_.OriginalPath] = $_.Result
}


# –°–æ—Ö—Ä–∞–Ω–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
$config | ConvertTo-Json | Out-File -FilePath "config.json" -Encoding UTF8